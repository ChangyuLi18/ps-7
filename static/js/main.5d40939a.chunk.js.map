{"version":3,"sources":["Projects.js","Background.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","d","setState","console","log","react_default","a","createElement","className","map","i","reactstrap_es","sm","title","description","target","href","link","Component","Background","apply","arguments","Homepage","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d40939a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\r\n\r\nexport class Projects extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // d3.csv('data/projects.csv', (err, data) => {\r\n        //     this.setState({\r\n        //         data: data\r\n        //     })\r\n        // })\r\n        d3.csv(\"data/projectList.csv\").then((d) => {\r\n            this.setState({ data: d });\r\n        });\r\n        \r\n    }\r\n    render() {\r\n        console.log(this.state.data)\r\n        return(\r\n            <div className=\"container\">Projects\r\n                { this.state.data.map((d, i) => {\r\n                    return(\r\n                    <Col sm=\"6\" key={ \"project\" + i }>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <CardTitle>\r\n                                    { d.title }\r\n                                </CardTitle>\r\n                                <CardText>\r\n                                    { d.description }\r\n                                </CardText>\r\n                                <a target=\"_blank\" href={ d.link }>\r\n                                    <Button>Link</Button>\r\n                                </a>\r\n                            </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                    </Col>\r\n                    \r\n                    )\r\n                }       \r\n            )}\r\n            </div>)\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nexport class Background extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div>\r\n                    Major1: Informatics (Data Science)\r\n                </div>\r\n                <div>\r\n                    Major2: International Studies (Internatinoal Political Economics)\r\n                </div>\r\n            </div>\r\n    )}\r\n}","import React, { Component } from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nexport class Homepage extends Component {\r\n    render() {\r\n        return <Jumbotron>Changyu Li</Jumbotron>\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Projects } from './Projects';\nimport { Background } from './Background';\nimport { Homepage } from './Homepage';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <Link to=\"/\">Home</Link>\n          { ' ' }\n          <Link to=\"/projects\">Projects</Link>\n          { ' ' }\n          <Link to=\"/background\">Background</Link>\n          <Route exact path=\"/\" component={ Homepage } />\n          <Route path=\"/projects\" component={ Projects } />\n          <Route path=\"/background\" component={ Background } />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}